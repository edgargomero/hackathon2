name: Deploy to Cloudflare Pages

on:
  push:
    branches:
      - main      # Production deployment
      - staging   # Staging deployment
  pull_request:
    branches:
      - main

jobs:
  # Job 1: Type checking and linting
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type check
        run: npx tsc --noEmit

      - name: Lint code
        run: npm run lint || echo "Linting not configured yet"

  # Job 2: Build and deploy
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: quality-checks
    # Only deploy on push to main or staging, not on PRs
    if: github.event_name == 'push'

    permissions:
      contents: read
      deployments: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Deploy to Cloudflare Pages (Production)
        if: github.ref == 'refs/heads/main'
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: hackathon2-icap
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          branch: main

      - name: Deploy to Cloudflare Pages (Staging)
        if: github.ref == 'refs/heads/staging'
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: hackathon2-icap-staging
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          branch: staging

      - name: Deployment Summary
        run: |
          echo "### Deployment Summary :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed to Cloudflare Pages** âœ…" >> $GITHUB_STEP_SUMMARY

  # Job 3: Preview deployments for PRs
  preview:
    name: Preview Deployment
    runs-on: ubuntu-latest
    needs: quality-checks
    # Only run on pull requests
    if: github.event_name == 'pull_request'

    permissions:
      contents: read
      deployments: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Deploy Preview to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        id: deploy
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: hackathon2-icap
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Preview Deployment')
            );

            const output = `### Preview Deployment Ready! ðŸš€

            **Preview URL:** ${{ steps.deploy.outputs.url }}

            **Environment:** Preview
            **Commit:** ${{ github.event.pull_request.head.sha }}

            ---

            *Deployed via Cloudflare Pages*`;

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: output
              });
            }
